#!/bin/bash
#
# The MIT License
#
# Copyright (c) 2019 Volodymyr Gorlov (https://github.com/vgorloff)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

set -e

SaNdkPath="/usr/local/ndk/21.4.7075529"
SaCurrentScriptName="$(basename ${BASH_SOURCE[0]})"
SaCurrentScriptDirPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if [[ $SHELL =~ "zsh" ]]; then
	SaCurrentScriptDirPath=$(dirname $0:A)
fi

SaToolchainPath=$(cd "$(dirname "$SaCurrentScriptDirPath")/../"; pwd)
if [ ! -f "$SaCurrentScriptDirPath/swift" ]; then
  echo "-> Development mode!"
  SaToolchainPath="$(cd "$(dirname "$SaCurrentScriptDirPath")"; pwd)/ToolChain/swift-android-toolchain"
fi

function usage {
  echo ""
  echo "Usage:"
  echo "   $SaCurrentScriptName [-v] -target <target> -output <output>"
  echo ""
  echo "   Where:"
  echo ""
  echo "   <target> Is one of the following:"
  echo ""
  echo "     - armv7-unknown-linux-android"
  echo "     - aarch64-unknown-linux-android"
  echo "     - i686-unknown-linux-android"
  echo "     - x86_64-unknown-linux-android"
  echo ""
  echo "   <output> Directory path into which the libraries will be copied."
  echo ""
  echo "   -v Verbose mode."
  echo ""
}

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -target)
    SaArchTarget="$2"
    shift # past argument
    shift # past value
    ;;
    -output)
    SaOutput="$2"
    shift # past argument
    shift # past value
    ;;
    -v)
    SaVerbose=YES
    shift # past argument
    ;;
    *) # unknown option
    shift # past argument
    ;;
esac
done

if [ -z "$SaArchTarget" ]; then
  echo "The \"-target\" argument is not provided."
  usage
  exit 1
fi

if [ "$SaArchTarget" = "armv7-unknown-linux-android" ] || [ "$SaArchTarget" = "aarch64-unknown-linux-android" ] || [ "$SaArchTarget" = "i686-unknown-linux-android" ] || [ "$SaArchTarget" = "x86_64-unknown-linux-android" ]; then
  true
else
  echo "Unknown target \"$SaArchTarget\""
  usage
  exit 1
fi

if [ -z "$SaOutput" ]; then
  echo "The \"-output\" argument is not provided."
  usage
  exit 1
fi

case $SaArchTarget in
  armv7-unknown-linux-android)
  SaSwiftArch=armv7
  SaCppArch=armeabi-v7a
  ;;
  aarch64-unknown-linux-android)
  SaSwiftArch=aarch64
  SaCppArch=arm64-v8a
  ;;
  i686-unknown-linux-android)
  SaSwiftArch=i686
  SaCppArch=x86
  ;;
  x86_64-unknown-linux-android)
  SaSwiftArch=x86_64
  SaCppArch=x86_64
  ;;
esac

if [ "$SaVerbose" = "YES" ]; then
  echo "Using toolchain \"$SaToolchainPath\"."
  echo "Copying \"$SaArchTarget\" libraries to \"$SaOutput\"..."
fi

mkdir -p "$SaOutput"

function copySoFile {
  SaDestinationFilePath="$SaOutput/`basename "$1"`"
  if [ "$1" -nt "$SaDestinationFilePath" ]; then
    if [ "$SaVerbose" = "YES" ]; then
      echo "Copying \"$1\""
    fi
    cp -f "$1" "$SaDestinationFilePath"
  fi
}

for SaFilePath in `find "$SaToolchainPath/usr/lib/swift/android/$SaSwiftArch" -type f -iname *.so -print`; do
  copySoFile "$SaFilePath"
done

copySoFile "$SaNdkPath/sources/cxx-stl/llvm-libc++/libs/${SaCppArch}/libc++_shared.so"
